import{V as y,v as f,E as u,aR as V,lT as W,lU as G,aV as J,lV as X,lW as Y,iF as Z,lX as S,lY as K,a_ as $,aS as Q,a$ as ss,lZ as es,iN as ts,a9 as as,b4 as os,l_ as ns,l$ as rs,aU as is}from"./index-DPJiPkbh.js";import{h as cs,N as ls,i as v,o as x,A as us}from"./External-B04G2qXv.js";import{i as w,h as ps,e as A,m as ms,a as fs}from"./progressUtils-BvsolsA_.js";const D=1e6,N=20*D,ds=2e9,ys=3;async function ws({data:e,name:t,description:s},a,o){let r=null;try{const n=y(a,"uploads"),i=y(n,"info"),{data:c}=await f(i,{query:{f:"json"},responseType:"json"});u(o);const p=V(a),l=c.maxUploadFileSize*D,d=p?ds:l,b=p?Math.min(N,l):N;if(e.size>d)throw new Error("Data too large");const C=y(n,"register"),{data:j}=await f(C,{query:{f:"json",itemName:gs(t),description:s},responseType:"json",method:"post"});if(u(o),!j.success)throw new Error("Registration failed");const{itemID:k}=j.item;r=y(n,k);const B=y(r,"uploadPart"),F=Math.ceil(e.size/b),g=new Array;for(let m=0;m<F;++m)g.push(e.slice(m*b,Math.min((m+1)*b,e.size)));const h=g.slice().reverse(),E=new Array,z=w(F,o==null?void 0:o.onProgress,"uploadItem"),L=async()=>{for(;h.length!==0;){const m=g.length-h.length,P=h.pop(),T=new FormData,_=z.simulate(m,ps(P.size));try{T.append("f","json"),T.append("file",P),T.append("partId",`${m}`);const{data:H}=await f(B,{timeout:0,body:T,responseType:"json",method:"post"});if(u(o),!H.success)throw new Error("Part upload failed")}finally{_.remove()}}};for(let m=0;m<ys&&h.length!==0;++m)E.push(L());await Promise.all(E);const M=y(r,"commit"),{data:U}=await f(M,{query:{f:"json",parts:g.map((m,P)=>P).join(",")},responseType:"json",method:"post"});if(u(o),!U.success)throw new Error("Commit failed");return U.item}catch(n){if(r!=null){const i=y(r,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw n}}function gs(e){return e.replaceAll("/","_").replaceAll("\\","_")}async function Ls(e,t,s){var r;const a=e.length;if(!a)return(r=s==null?void 0:s.onProgress)==null||r.call(s,1),[];const o=w(a,s==null?void 0:s.onProgress,"uploadAssets");return Promise.all(e.map((n,i)=>hs(n,t,{...s,onProgress:o.makeOnProgress(i)})))}async function hs(e,{layer:t,ongoingUploads:s},a){var n;const o=s.get(e);if(o)return o;if(!Rs(t))throw new W;if(Ps(e,t))return(n=a==null?void 0:a.onProgress)==null||n.call(a,1),e;const r=Ts(e,t,a);s.set(e,r);try{await r}finally{s.delete(e)}return e}function Ps(e,t){const{parsedUrl:s}=t;return s!=null&&e.metadata.externalSources.some(a=>cs(a,s))}async function Ts(e,t,s){const{metadata:a}=e,{displaySource:o}=a,r=I(o==null?void 0:o.source,t),n=!!r,i=a.externalSources.length>0,c=n?bs(r,t,s):i?As(e,t,s):js(e,t,s),p=await c;return u(s),e.addExternalSources([p]),e}async function bs(e,t,s){return{source:await O(e,t,s),original:!0}}async function As(e,t,s){const a=q(t),{externalSources:o}=e.metadata,r=Es(o,t);if(!r)throw new G;const n=w(A.uploadConvertibleSource,s==null?void 0:s.onProgress,"uploadConvertibleSource"),i=await O(r,t,{onProgress:n.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const c=r.reduce((l,{asset:d})=>d instanceof File?l+d.size:l,0),p=n.simulate("serviceAssetsToGlb",ms(c));try{return{source:await Ds(i,t,a)}}finally{p.remove()}}async function js(e,t,s){const a=w(A.uploadLocalMesh,s==null?void 0:s.onProgress,"uploadLocalMesh"),o=Fs(e,t,{...s,onProgress:a.makeOnProgress("meshToAssetBlob")});return{source:await R([o],t,{...s,onProgress:a.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function Fs(e,t,s){const a=q(t),o=await e.load(s),r=await o.toBinaryGLTF({ignoreLocalTransform:!0});u(s);const n=await r.buffer();return u(s),{blob:new Blob([n.data],{type:n.type}),assetName:`${J()}.glb`,assetType:a}}function Es(e,t){for(const s of e){const a=I(s.source,t);if(a)return a}return null}function I(e,t){if(!e)return null;const{infoFor3D:{supportedFormats:s,editFormats:a}}=t,o=us(e),r=new Array;let n=!1;for(let i=0;i<o.length;++i){const c=Us(o[i],s);if(!c)return null;a.includes(c.assetType)&&(n=!0),r.push(c)}return n?r:null}function Us(e,t){const s=ls(e,t);return s?{asset:e,assetType:s}:null}async function O(e,t,s){return R(e.map(a=>Ns(a,s)),t,s)}async function R(e,t,s){const a=w(A.uploadAssetBlobs,s==null?void 0:s.onProgress,"uploadAssetBlobs"),o=await $s(e,t,{...s,onProgress:a.makeOnProgress("prepareAssetItems")});u(s);const r=o.map(({item:i})=>i),{uploadResults:n}=await vs(r,t,{...s,onProgress:a.makeOnProgress("uploadAssetItems")});return u(s),e.map((i,c)=>xs(o[c],n[c],t))}async function Ns(e,t){const{asset:s,assetType:a}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:a};const o=await s.toBlob(t);return u(t),{blob:o,assetName:s.assetName,assetType:a}}async function Ss(e,t,s){const{blob:a,assetType:o,assetName:r}=e;let n=null;try{const i=await ws({data:a,name:r},t.url,s);u(s),n={assetType:o,assetUploadId:i.itemID}}catch(i){as(i),qs().warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!n){const i=await os(a);if(u(s),!i.isBase64)throw new ns;n={assetType:o,assetData:i.data}}if(!n)throw new rs;return{item:n,assetName:r}}function $s(e,t,s){const a=w(e.length,s==null?void 0:s.onProgress,"prepareAssetItems");return Promise.all(e.map(async(o,r)=>{const n=Ss(await o,t,{...s,onProgress:a.makeOnProgress(r)});return u(s),n}))}async function vs(e,t,s){const a=fs(s==null?void 0:s.onProgress);try{const o=await f(y(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(u(s),o.data.uploadResults.length!==e.length)throw new X(e.length,o.data.uploadResults.length);return o.data}finally{a.remove()}}function xs(e,t,s){const{success:a}=t;if(!a){const{error:p}=t;throw new Y(e.assetName,p)}const{assetHash:o}=t,{assetName:r,item:{assetType:n}}=e,{infoFor3D:{supportedFormats:i}}=s,c=Z(n,i);if(!c)throw new S(n);return new v(r,c,[new x(`${s.parsedUrl.path}/assets/${o}`,o)])}async function Ds(e,t,s){var p;const a=e.map(({assetName:l,parts:d})=>({assetName:l,assetHash:d[0].partHash})),o=(p=t.capabilities)==null?void 0:p.operations.supportsAsyncConvert3D,r={f:"json",assets:JSON.stringify(a),transportType:"esriTransportTypeUrl",targetFormat:s,async:o},n=y(t.parsedUrl.path,"convert3D");let i;try{i=(await(o?Os:Is)(n,{query:r,responseType:"json",timeout:0})).data}catch{throw new K}const{supportedFormats:c}=t.infoFor3D;return i.assets.map(l=>{const d=$(l.contentType,c);if(!d)throw new S(d);return new v(l.assetName,l.contentType,[new x(l.assetURL,l.assetHash)])})}function Is(e,t){return f(e,t)}async function Os(e,t){const s=(await f(e,t)).data.statusUrl;for(;;){const a=(await f(s,{query:{f:"json"},responseType:"json"})).data;switch(a.status){case"Completed":return f(a.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(a.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await Q(Cs)}}function Rs(e){return!!e.infoFor3D&&!!e.url}function q(e){const{infoFor3D:t}=e,s=$("model/gltf-binary",t.supportedFormats)??ss("glb",t.supportedFormats);if(!s)throw new es;return s}function qs(){return is.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const Cs=ts(1e3);export{Ls as uploadAssets};
