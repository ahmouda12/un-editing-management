import{cS as a,cT as m,ac as l,E as d,mj as u,mk as g,cR as p,eT as n,eP as h}from"./index-B252NKV0.js";import{t as _}from"./ElevationProfile-Bv1k14cY.js";import{a as c}from"./HoveredPoints-osqcSrza.js";import"./memoize-DsJmrG76.js";import"./ElevationQueryTileCache-BKuK8tEK.js";import"./LayerConstants-B33OP6sh.js";import"./Material-5cwIpifF.js";import"./interfaces-CGza0uBR.js";import"./basicInterfaces-DngWxyLO.js";import"./ContentObject-BZXFh7BC.js";import"./VertexAttribute-BnAa5VW0.js";import"./Util-DsJryf9x.js";import"./ElevationProvider-Z72XcWTz.js";import"./boundedPlane-YCrsjrS8.js";import"./lineSegment-BMYSACYW.js";import"./verticalOffsetUtils-Byw9d5zq.js";import"./mat3-DPPMYMhB.js";import"./orientedBoundingBox-B61nPEal.js";import"./quat-3FyS98Fp.js";import"./spatialReferenceEllipsoidUtils-DV15qcib.js";import"./computeTranslationToOriginAndRotation-BwxvMbbc.js";import"./Attribute-B-NAci_J.js";import"./Intersector-DFmhN7LU.js";import"./Intersector-Cp54otHo.js";import"./defaultUnit-cOqyfjtX.js";import"./getDefaultUnitForView-DrVBKioD.js";import"./throttle-jjSnxk80.js";import"./QueueProcessor-CvAp86Lk.js";import"./ReactiveMap-DcQhQdHv.js";import"./Scheduler-D2EdV-K_.js";import"./debugFlags-BYwEz_hP.js";import"./RenderState-DaVlEYWY.js";import"./traversalUtils-DmE6QkgJ.js";import"./ElevationQuery-JC1Nox43.js";import"./ElevationSamplerData-CLGqTcb_.js";import"./TileKey-DZd6gJy7.js";import"./UnitSelect-BUgQvOgO.js";class v{constructor(t){this._params=t,this._highlightTask=null,this._highlightHandle=null}destroy(){this.remove()}remove(){this._highlightTask=a(this._highlightTask),this._highlightHandle=m(this._highlightHandle)}update(t){if(this.remove(),t==null||!w(t))return;const e=t.layer;this._highlightTask=l(async i=>{const r=await this._params.view.whenLayerView(e);d(i);const s=u(r)?r:null;s&&(this._highlightHandle=s.highlight(t))})}}function w(o){return o.geometry!=null&&o.geometry.type==="polyline"}class et{constructor(t,e){this._handles=new g,this._inputRepresentation=new v({view:t}),this._hoveredPoints=new c({view:t}),this._handles.add([p(()=>e.viewModel.hoveredPoints,i=>this._hoveredPoints.update(i),n),p(()=>{const{state:i,highlightEnabled:r,viewModel:s}=e;return{input:s.input,state:i,highlightEnabled:r}},i=>this._updateInputRepresentation(i),n)])}destroy(){this._handles=h(this._handles),this._inputRepresentation=h(this._inputRepresentation),this._hoveredPoints=h(this._hoveredPoints)}_updateInputRepresentation({input:t,state:e,highlightEnabled:i}){e===_.Selected&&i?this._inputRepresentation.update(t):this._inputRepresentation.remove()}}export{et as ElevationProfileView2D};
