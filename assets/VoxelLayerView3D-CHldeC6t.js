import{s as u,G as T,cR as l,fs as y,eY as x,dl as E,f as I,hW as A,df as M,cx as L,bL as D,aU as w,x as b,y as S,B as P,bO as f,jh as F}from"./index-B252NKV0.js";import{n as $}from"./LayerView3D-7HzYlANA.js";import{l as U,o,i as V}from"./EdgeShader.glsl-B6xvxs0N.js";import{t as R}from"./WaterSurface.glsl-DJiRVkTI.js";import{i as C}from"./PopupSceneLayerView-BbAczYxJ.js";import{u as z}from"./LayerView-D2pvr0Q6.js";import"./heightModelInfoUtils-CYfboRg2.js";import"./boundedPlane-YCrsjrS8.js";import"./lineSegment-BMYSACYW.js";import"./RenderCoordsHelper-D0uwfR3O.js";import"./spatialReferenceEllipsoidUtils-DV15qcib.js";import"./projectVectorToPoint-C5fA5x6U.js";import"./ElevationProvider-Z72XcWTz.js";import"./verticalOffsetUtils-Byw9d5zq.js";import"./mat3-DPPMYMhB.js";import"./orientedBoundingBox-B61nPEal.js";import"./quat-3FyS98Fp.js";import"./computeTranslationToOriginAndRotation-BwxvMbbc.js";import"./Attribute-B-NAci_J.js";import"./scaleUtils-BKVOuLFd.js";import"./DefaultUI-4DBz9mkp.js";import"./ReactiveMap-DcQhQdHv.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./mat2df64-CBKYtunK.js";import"./vec2f32-BbH2jxlN.js";import"./normalizeUtils-PvjooRb6.js";import"./normalizeUtilsCommon-ByXMGwNF.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./accessibleHandler-yeijlTke.js";import"./Compass-BqUvL1gL.js";import"./utils-DsJqvptN.js";import"./GoTo-B08Csiw_.js";import"./NavigationToggle-DNdSP6VQ.js";import"./Zoom-BQUhauBk.js";import"./viewpointUtils-QCB8ouyq.js";import"./frustum-VM_sBTPR.js";import"./earthUtils-DV53znm3.js";import"./spatialReferenceSupport-7FaIbiiv.js";import"./ElevationSamplerData-CLGqTcb_.js";import"./terrainUtils-uYCMkPpW.js";import"./Util-DsJryf9x.js";import"./Scheduler-D2EdV-K_.js";import"./debugFlags-BYwEz_hP.js";import"./RenderState-DaVlEYWY.js";import"./TileInfo-Cj0aaJ6S.js";import"./TileKey-DZd6gJy7.js";import"./Environment-CdSNjorT.js";import"./weather-BLxro0E8.js";import"./projectPointToWGS84ComparableLonLat-JSQbLxiZ.js";import"./interfaces-CGza0uBR.js";import"./IntegerPassUniform-BV9MAEur.js";import"./enums-DSseSvdG.js";import"./Texture-BT-WYJiR.js";import"./BindType-BmZEZMMh.js";import"./VertexAttribute-BnAa5VW0.js";import"./basicInterfaces-DngWxyLO.js";import"./ShaderTechniqueConfiguration-Ba2Oo7i0.js";import"./doublePrecisionUtils-B0owpBza.js";import"./Material-5cwIpifF.js";import"./ContentObject-BZXFh7BC.js";import"./requestImageUtils-DzTga_rS.js";import"./OrderIndependentTransparency-Dar7ikM6.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./ElevationContext-0u_g65xQ.js";import"./axisAngleDegrees-C5xDLED1.js";import"./NestedMap-DgiGbX8E.js";import"./Geometry-Ba4xjwln.js";import"./Indices-BSZ2vHzt.js";import"./triangle-BvzaHny8.js";import"./Octree-C_vy2cBS.js";import"./InterleavedLayout-DjPFAyuB.js";import"./BufferView-DithrMUX.js";import"./types-D0PSWh4d.js";import"./floatRGBA-0vmpOgzj.js";import"./Intersector-DFmhN7LU.js";import"./glUtil-DS73TAjp.js";import"./VertexArrayObject-adc8SYn-.js";import"./BufferObject-DdM-Y0w0.js";import"./vec3f32-Cw9Q6TO_.js";import"./DoubleArray-DydFqj4b.js";import"./hydratedFeatures-BRhOD9YG.js";import"./Program-wFflZSL5.js";import"./ShadowCastVisualizeTechniqueConfiguration-Cw3UK_Yj.js";import"./ray-DAW-uzC6.js";import"./RealisticTree.glsl-CwQ9Or_P.js";import"./vec3-DPfuEKPJ.js";import"./DefaultMaterial_COLOR_GAMMA-DpjIaYJf.js";import"./resourceUtils-BT8kUm1Z.js";import"./VertexColor.glsl-D4WHfTL4.js";import"./symbolColorUtils-D89hqBDM.js";import"./ZoomMomentumEstimator-gQBuScvi.js";import"./ColorMaterial.glsl-9YKbkIUs.js";import"./labelFormatUtils-H994QWFK.js";import"./FeatureTileDescriptor3D-DHCjGIg_.js";import"./ElevationQueryTileCache-BKuK8tEK.js";import"./LayerConstants-B33OP6sh.js";import"./Intersector-Cp54otHo.js";import"./ElevationRange-BrgM1moX.js";import"./geometryServiceUtils-DQSAcvNz.js";import"./LercDecoder-DU0V7Jru.js";import"./WorkerHandle-CzrOFJZz.js";import"./RenderableTile-DtAne7GO.js";import"./enums-BRzLM11V.js";import"./TileStrategy-l1611y-Q.js";import"./TileKey-Dt_FQSdw.js";import"./QueueProcessor-CvAp86Lk.js";import"./GeometryUtils-BvoQHMVi.js";import"./config-MDUrh2eL.js";import"./DefaultVertexAttributeLayouts-o8Fw2Bif.js";import"./DisplayObject-B2mbaom_.js";import"./Normals-C_NhLO8Y.js";import"./rasterUtils-Cy3YcRxv.js";import"./StyleDefinition-pu9RBNlY.js";import"./enums-BRqP_wXA.js";import"./resources-DHuiDxSF.js";import"./edgeProcessing-y5myZLSQ.js";import"./deduplicate-aiEVsYi-.js";import"./edgeUtils-M6KOVtH3.js";import"./EdgeWorkerHandle-BwQg52ff.js";import"./workerHelper-DtT1uotp.js";import"./testSVGPremultipliedAlpha-BWu01myj.js";import"./RenderingContext-WP9tAZpV.js";import"./ProgramCache-pF_7Wga5.js";import"./imageUtils-LnXySzmN.js";import"./dehydratedFeatures-Dt-SjqTC.js";import"./featureConversionUtils-BVsMNPzF.js";import"./OptimizedFeature-CXeSoBCN.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./OptimizedGeometry-DLPswkPy.js";import"./earcut-gCDAS0gj.js";import"./SnappingCandidate-O5eRSE6e.js";import"./triangulationUtils-B5WoxWgr.js";import"./CIMSymbolHelper-ZEeHC0zq.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-oEBemou-.js";import"./definitions-B54owTRu.js";import"./Rect-CUzevAry.js";import"./BoundingBox-BhuXqU4L.js";import"./line-MrNX-P16.js";import"./MeshComponent-Vga6qE-G.js";import"./meshVertexSpaceUtils-gkGG_eew.js";import"./MeshLocalVertexSpace-BNetD1iK.js";import"./georeference-TQxFGYYy.js";import"./interfaces-DkjgzG8v.js";import"./DefaultLayouts-C3Py-gzy.js";import"./popupUtils-B33__man.js";var s;(function(e){e[e.API=1]="API",e[e.VerboseAPI=2]="VerboseAPI",e[e.Error=3]="Error"})(s||(s={}));const n=f(),g=f();let h=class extends C($(z)){constructor(){super(...arguments),this._suspendedHandle=null,this._usedMemory=0,this._futureMemory=0,this.type="voxel-3d",this.slicePlaneEnabled=!1,this._wasmLayerId=-1,this.ignoresMemoryFactor=!0,this._dbgFlags=new Set}get baseUrl(){var e;return((e=this.layer.parsedUrl)==null?void 0:e.path)??""}get wasmLayerId(){return this._wasmLayerId}initialize(){var d;if(this._dbgFlags.add(s.Error),this.view.viewingMode!=="local")throw new u("voxel:unsupported-viewingMode","Voxel layers support local viewingMode only.",{});if(!((d=this.view._stage.renderView.renderingContext.capabilities.colorBufferFloat)!=null&&d.textureFloat))throw new u("voxel:missing-color-buffer-float","Voxel layers require the WebGL2 extension EXT_color_buffer_float",{});const e=this.layer.spatialReference;if(!T(e,this.view.spatialReference))throw new u("layerview:spatial-reference-incompatible","The spatial reference of this scene layer is incompatible with the spatial reference of the view",{});const t=this.layer.currentVariableId,r=this.layer.getVolume(t),a=this.layer.getVariable(t);if(r!=null&&a!=null){const p=r.dimensions[0],i=r.dimensions[1],c=r.zDimension;if(c>1){const v=r.dimensions[c],W=p.size*i.size*v.size;let _=1;switch(a.renderingFormat.type){case"Int16":case"UInt16":_=2;break;case"Int32":case"UInt32":case"Float32":_=4}this._futureMemory=_*W}}const m=U(this).then(p=>{this._wasmLayerId=p,this._suspendedHandle=l(()=>this.suspended,i=>{const c=o(this.view);c&&c.setEnabled(this,!i)},y),this.addHandles([l(()=>this.layer.renderMode,i=>this._pushRenderModeToWasm(i)),l(()=>this.layer.currentVariableId,i=>this._pushCurrentVariableIdToWasm(i)),l(()=>this.layer.getSections(),i=>this._pushSectionsToWasm(i)),l(()=>this.layer.getVariableStyles(),i=>this._pushVariableStylesToWasm(i)),l(()=>this.layer.getVolumeStyles(),i=>this._pushVolumeStylesToWasm(i)),l(()=>this.layer.enableDynamicSections,i=>this._pushEnableDynamicSectionsToWasm(i)),l(()=>this.layer.enableIsosurfaces,i=>this._pushEnableIsosurfacesToWasm(i)),l(()=>this.layer.enableSections,i=>this._pushEnableSectionsToWasm(i)),l(()=>this.layer.enableSlices,i=>this._pushEnableSlicesToWasm(i)),l(()=>this.slicePlaneEnabled,i=>this._pushAnalysisSliceToWasm(i,this.view.slicePlane)),l(()=>this.view.slicePlane,i=>this._pushAnalysisSliceToWasm(this.slicePlaneEnabled,i)),l(()=>this.layer.minScale,i=>this._onScaleUpdated(this.view.scale,i,this.layer.maxScale),y),l(()=>this.layer.maxScale,i=>this._onScaleUpdated(this.view.scale,this.layer.minScale,i),y),l(()=>this.view.scale,i=>this._onScaleUpdated(i,this.layer.minScale,this.layer.maxScale),y)])}).catch(p=>{if(V(this),this._wasmLayerId=-1,p===-1)throw new u("voxel:addLayer-failure","The voxel layer description was invalid.",{});if(p===-2)throw new u("voxel:addLayer-failure","The voxel layer web assembly module failed to download.",{})});this.addResolvingPromise(m)}destroy(){V(this),this._suspendedHandle&&(this._suspendedHandle.remove(),this._suspendedHandle=null)}isUpdating(){const e=o(this.view);return!(this._wasmLayerId<0||e==null)&&e.isUpdating(this._wasmLayerId)}updatingFlagChanged(){this.notifyChange("updating")}get usedMemory(){return this._usedMemory}get unloadedMemory(){return this._futureMemory}get performanceInfo(){return new R(this.usedMemory)}whenGraphicBounds(e,t){const r=e.attributes["Voxel.WorldPosition"];if(r){const a=x(),m=JSON.parse(r);if(E(m,this.view.renderSpatialReference,g,this.view.spatialReference||I.WGS84))return A(a,g),Promise.resolve({boundingBox:a,screenSpaceObjects:[]})}return Promise.reject()}setUsedMemory(e){this._usedMemory=e,this._futureMemory=0}captureFrustum(){const e=o(this.view);e==null||e.captureFrustum()}toggleFullVolumeExtentDraw(){const e=o(this.view);e==null||e.toggleFullVolumeExtentDraw(this)}getLayerTimes(){const e=o(this.view);return(e==null?void 0:e.getLayerTimes(this))??[]}getCurrentLayerTimeIndex(){const e=o(this.view);return(e==null?void 0:e.getCurrentLayerTimeIndex(this))??0}_pushRenderModeToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushRenderModeToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setRenderMode(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushRenderModeToWasm() failed!")}_pushSectionsToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setStaticSections(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushSectionsToWasm() failed!")}_pushCurrentVariableIdToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushCurrentVariableIdToWasm() called!, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setCurrentVariable(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushCurrentVariableIdToWasm() failed!")}_pushVariableStylesToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushVariableStylesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setVariableStyles(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushVariableStylesToWasm() failed!")}_accountForEnableSlices(e,t){const r=t??this.layer.enableSlices;for(let a=0;a<e.length;++a){const m=e[a];for(const d of m.slices)d.enabled=d.enabled&&r}}_pushVolumeStylesToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushVolumeStylesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t&&(this._accountForEnableSlices(e,null),t.setVolumeStyles(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushVolumeStylesToWasm() failed!"))}_pushAnalysisSliceToWasm(e,t){const r=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushAnalysisSliceToWasm() called, "+(r?"have WASM":"don't have WASM!!!"));let a=!1;if(r){if(t){const m=t.origin;M(n,t.basis1,t.basis2),L(n,n),a=r.setAnalysisSlice(this,e,m,n)}else D(n,0,0,1),a=r.setAnalysisSlice(this,!1,n,n);a||this._dbg(s.Error,"VoxelLayerView3D._pushAnalysisSliceToWasm() failed!")}}_pushEnableDynamicSectionsToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableDynamicSections(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() failed!")}_pushEnableSlicesToWasm(e){const t=o(this.view);if(this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushEnableSlicesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t){const r=this.layer.getVolumeStyles();this._accountForEnableSlices(r,e),t.setVolumeStyles(this,r)||this._dbg(s.Error,"VoxelLayerView3D._pushEnableSlicesToWasm() failed!")}}_pushEnableIsosurfacesToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableIsosurfaces(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() failed!")}_pushEnableSectionsToWasm(e){const t=o(this.view);this._dbg(s.VerboseAPI,"VoxelLayerView3D._pushEnableSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableSections(this,e)||this._dbg(s.Error,"VoxelLayerView3D._pushEnableSectionsToWasm() failed!")}_onScaleUpdated(e,t,r){const a=F(e,t,r),m=o(this.view);m&&m.setIsInScaleRange(this,a)}async whenGraphicAttributes(e,t){return e}_dbg(e,t){this._dbgFlags.has(e)&&(e===s.Error?w.getLogger(this).error(t):w.getLogger(this).warn(t))}};b([S()],h.prototype,"layer",void 0),b([S()],h.prototype,"baseUrl",null),b([S({type:Boolean})],h.prototype,"slicePlaneEnabled",void 0),h=b([P("esri.views.3d.layers.VoxelLayerView3D")],h);const xi=h;export{xi as default};
