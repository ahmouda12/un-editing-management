import{bX as w,fC as b,fM as j,fB as v,fI as G,fN as O}from"./index-B252NKV0.js";import{K as g}from"./CIMSymbolHelper-ZEeHC0zq.js";import{CIMSymbolRasterizer as R}from"./CIMSymbolRasterizer-BtwGXREA.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-oEBemou-.js";import"./OptimizedGeometry-DLPswkPy.js";import"./GeometryUtils-BvoQHMVi.js";import"./enums-BRqP_wXA.js";import"./definitions-B54owTRu.js";import"./vec2f32-BbH2jxlN.js";import"./Rect-CUzevAry.js";import"./BoundingBox-BhuXqU4L.js";import"./CIMResourceManager-DmlnNZ3n.js";import"./imageUtils-LnXySzmN.js";const f=new R(null),u=w(b.size),S=w(b.maxSize),C=w(b.lineWidth),V=1;async function $(a,e,o){const i=e==null?void 0:e.size;let t=i!=null&&typeof i=="object"&&"width"in i?i.width:i,n=i!=null&&typeof i=="object"&&"height"in i?i.height:i;if(t==null||n==null)if(o==="esriGeometryPolygon")t=u,n=u;else{const l=await q(a,e,o);l&&(t=l.width,n=l.height),o==="esriGeometryPolyline"&&(t=C),t=t!=null&&isFinite(t)?Math.min(t,S):u,n=n!=null&&isFinite(n)?Math.max(Math.min(n,S),V):u}return e.style==="legend"&&o==="esriGeometryPolyline"&&(t=C),{width:t,height:n}}async function q(a,e,o){const{feature:i,fieldMap:t,viewParams:n}=e.cimOptions||e,l=await O.resolveSymbolOverrides(a.data,i,null,t,o,null,n);if(!l)return null;(a=a.clone()).data={type:"CIMSymbolReference",symbol:l},a.data.primitiveOverrides=void 0;const r=[];return g.fetchResources(l,f.resourceManager,r),g.fetchFonts(l,f.resourceManager,r),r.length>0&&await Promise.all(r),g.getEnvelope(l,null,f.resourceManager)}async function Y(a,e={}){var M;const{node:o,opacity:i,symbolConfig:t}=e,n=t!=null&&typeof t=="object"&&"isSquareFill"in t&&t.isSquareFill,l=e.cimOptions||e,r=l.geometryType||j((M=a==null?void 0:a.data)==null?void 0:M.symbol),p=await $(a,e,r),{feature:I,fieldMap:P}=l,L=n||r!=="esriGeometryPolygon"?"preview":"legend",h=await f.rasterizeCIMSymbolAsync(a,I,p,L,P,r,null,l.viewParams,l.allowScalingUp);if(!h)return null;const{width:x,height:z}=h,m=document.createElement("canvas");m.width=x,m.height=z,m.getContext("2d").putImageData(h,0,0);const y=v(p.width),d=v(p.height),s=new Image(y,d);s.src=m.toDataURL(),s.ariaLabel=e.ariaLabel??null,s.alt=e.ariaLabel??"",i!=null&&(s.style.opacity=`${i}`);let c=s;if(e.effectView!=null){const F={shape:{type:"image",x:0,y:0,width:y,height:d,src:s.src},fill:null,stroke:null,offset:[0,0]};c=G([[F]],[y,d],{effectView:e.effectView,ariaLabel:e.ariaLabel})}return o&&c&&o.appendChild(c),c}export{Y as previewCIMSymbol};
