import{dm as f,cd as h,ca as g,el as w,em as _,x as E,B as v,bO as p,E as y,kA as b,c3 as u}from"./index-B252NKV0.js";import{v as L,b as V,j}from"./lineSegment-BMYSACYW.js";import{W as C}from"./Octree-C_vy2cBS.js";import{m as P}from"./edgeProcessing-y5myZLSQ.js";import"./frustum-VM_sBTPR.js";import"./Util-DsJryf9x.js";import"./deduplicate-aiEVsYi-.js";import"./Indices-BSZ2vHzt.js";import"./InterleavedLayout-DjPFAyuB.js";import"./BufferView-DithrMUX.js";import"./types-D0PSWh4d.js";import"./VertexAttribute-BnAa5VW0.js";import"./glUtil-DS73TAjp.js";import"./enums-DSseSvdG.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./Normals-C_NhLO8Y.js";const S=1e3;function I(t,e,n){const s=w(),o=_(s);return f(o,o,t,.5),f(o,o,e,.5),s[3]=h(o,t),g(o,o,n),s}let l=class{constructor(){this._idToComponent=new Map,this._components=new C(t=>t.bounds),this._edges=new C(t=>t.bounds),this._tmpLineSegment=L(),this._tmpP1=p(),this._tmpP2=p(),this._tmpP3=p(),this.remoteClient=null}async fetchCandidates(t,e){await Promise.resolve(),y(e),await this._ensureEdgeLocations(t,e);const n=[];return this._edges.forEachNeighbor(s=>(this._addCandidates(t,s,n),n.length<S),t.bounds),{result:{candidates:n}}}async _ensureEdgeLocations(t,e){const n=[];if(this._components.forEachNeighbor(i=>{if(i.info==null){const{id:c,uid:d}=i;n.push({id:c,uid:d})}return!0},t.bounds),!n.length)return;const s={components:n},o=await this.remoteClient.invoke("fetchAllEdgeLocations",s,e??{});for(const i of o.components)this._setFetchEdgeLocations(i)}async add(t){const e=new m(t.id,t.bounds);return this._idToComponent.set(e.id,e),this._components.add([e]),{result:{}}}async remove(t){const e=this._idToComponent.get(t.id);if(e){const n=[];this._edges.forEachNeighbor(s=>(s.component===e&&n.push(s),!0),e.bounds),this._edges.remove(n),this._components.remove([e]),this._idToComponent.delete(e.id)}return{result:{}}}_setFetchEdgeLocations(t){const e=this._idToComponent.get(t.id);if(e==null||t.uid!==e.uid)return;const n=P.createView(t.locations),s=new Array(n.count),o=p(),i=p();for(let r=0;r<n.count;r++){n.position0.getVec(r,o),n.position1.getVec(r,i);const a=I(o,i,t.origin),x=new T(e,r,a);s[r]=x}this._edges.add(s);const{objectIds:c,origin:d}=t;e.info={locations:n,objectIds:c,origin:d}}_addCandidates(t,e,n){const{info:s}=e.component,{origin:o,objectIds:i}=s,c=s.locations,d=c.position0.getVec(e.index,this._tmpP1),r=c.position1.getVec(e.index,this._tmpP2);g(d,d,o),g(r,r,o);const a=i[c.componentIndex.get(e.index)];this._addEdgeCandidate(t,a,d,r,n),this._addVertexCandidate(t,a,d,n),this._addVertexCandidate(t,a,r,n)}_addEdgeCandidate(t,e,n,s,o){if(!t.returnEdge)return;const i=_(t.bounds),c=V(n,s,this._tmpLineSegment),d=j(c,i,this._tmpP3);b(t.bounds,d)&&o.push({type:"edge",objectId:e,target:u(d),distance:h(i,d),start:u(n),end:u(s)})}_addVertexCandidate(t,e,n,s){if(!t.returnVertex||!b(t.bounds,n))return;const o=_(t.bounds);s.push({type:"vertex",objectId:e,target:u(n),distance:h(o,n)})}};l=E([v("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],l);const K=l;class m{constructor(e,n){this.id=e,this.bounds=n,this.info=null,this.uid=++m.uid}}m.uid=0;class T{constructor(e,n,s){this.component=e,this.index=n,this.bounds=s}}export{K as default};
