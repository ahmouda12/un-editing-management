import{cS as a,cT as m,ac as l,E as d,mj as u,mk as g,cR as p,eT as n,eP as h}from"./index-DPJiPkbh.js";import{t as _}from"./ElevationProfile-BDSNMQ_N.js";import{a as c}from"./HoveredPoints-Bkt9GekR.js";import"./memoize-DsJmrG76.js";import"./ElevationQueryTileCache-CV-7cE3j.js";import"./LayerConstants-B33OP6sh.js";import"./Material-CcaRhBp-.js";import"./interfaces-CGza0uBR.js";import"./basicInterfaces-DngWxyLO.js";import"./ContentObject-tLjB2Ud3.js";import"./VertexAttribute-BnAa5VW0.js";import"./Util-C76gCxal.js";import"./ElevationProvider-DuAnZ1w5.js";import"./boundedPlane-C7AEtm0i.js";import"./lineSegment-BXFQuctu.js";import"./verticalOffsetUtils-5CRVG66a.js";import"./mat3-CakTilsz.js";import"./orientedBoundingBox-BABDZfWD.js";import"./quat-B_RTSvGc.js";import"./spatialReferenceEllipsoidUtils-MJ9Uj9G-.js";import"./computeTranslationToOriginAndRotation-DJULrcwj.js";import"./Attribute-B-NAci_J.js";import"./Intersector-G-a_ey6X.js";import"./Intersector-ovsF6jeJ.js";import"./defaultUnit-DHDAnn2J.js";import"./getDefaultUnitForView-Bcf6FxpR.js";import"./throttle-jjSnxk80.js";import"./QueueProcessor-DdpNWD80.js";import"./ReactiveMap-sicXFvKD.js";import"./Scheduler-B7taRppB.js";import"./debugFlags-BTuu0IjQ.js";import"./RenderState-DaVlEYWY.js";import"./traversalUtils-DmE6QkgJ.js";import"./ElevationQuery-yID1NUNj.js";import"./ElevationSamplerData-2i_xP9yk.js";import"./TileKey-DZd6gJy7.js";import"./UnitSelect-CjoN6u1F.js";class v{constructor(t){this._params=t,this._highlightTask=null,this._highlightHandle=null}destroy(){this.remove()}remove(){this._highlightTask=a(this._highlightTask),this._highlightHandle=m(this._highlightHandle)}update(t){if(this.remove(),t==null||!w(t))return;const e=t.layer;this._highlightTask=l(async i=>{const r=await this._params.view.whenLayerView(e);d(i);const s=u(r)?r:null;s&&(this._highlightHandle=s.highlight(t))})}}function w(o){return o.geometry!=null&&o.geometry.type==="polyline"}class et{constructor(t,e){this._handles=new g,this._inputRepresentation=new v({view:t}),this._hoveredPoints=new c({view:t}),this._handles.add([p(()=>e.viewModel.hoveredPoints,i=>this._hoveredPoints.update(i),n),p(()=>{const{state:i,highlightEnabled:r,viewModel:s}=e;return{input:s.input,state:i,highlightEnabled:r}},i=>this._updateInputRepresentation(i),n)])}destroy(){this._handles=h(this._handles),this._inputRepresentation=h(this._inputRepresentation),this._hoveredPoints=h(this._hoveredPoints)}_updateInputRepresentation({input:t,state:e,highlightEnabled:i}){e===_.Selected&&i?this._inputRepresentation.update(t):this._inputRepresentation.remove()}}export{et as ElevationProfileView2D};
